import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
st.set_page_config(layout = 'centered',page_title='first app')

# st.balloons()
st.write("Streamlit App by: [Mariam Hussein](https://www.linkedin.com/in/mariamhusseindev/)")
st.title("About Dataset:")
st.write("This dataset contains the hourly and daily count of rental bikes between the years 2011 and 2012 in the Capital bike share system with the corresponding weather and seasonal information.")
st.markdown(
"""
Data Set Information:
Bike sharing systems are new generation of traditional bike rentals where whole process from membership, rental and return back has become automatic. Through these systems, user is able to easily rent a bike from a particular position and return back at another position. Currently, there are about over 500 bike-sharing programs around the world which is composed of over 500 thousands bicycles. Today, there exists great interest in these systems due to their important role in traffic, environmental and health issues.
Apart from interesting real world applications of bike sharing systems, the characteristics of data being generated by these systems make them attractive for the research. Opposed to other transport services such as bus or subway, the duration of travel, departure and arrival position is explicitly recorded in these systems. This feature turns bike sharing system into a virtual sensor network that can be used for sensing mobility in the city. Hence, it is expected that most of important events in the city could be detected via monitoring these data.
"""
)
st.title("Attribute Information:")
st.markdown(
"""
Both hour.csv and day.csv have the following fields, except hr which is not available in day.csv
- instant: record index
- dteday : date
- season : season (1: springer , 2: summer , 3: fall , 4: winter)
- yr : year (0: 2011, 1:2012)
- mnth : month ( 1 to 12)
- hr : hour (0 to 23)
- holiday : weather day is holiday or not (extracted from [Web Link])
- weekday : day of the week
- workingday : if day is neither weekend nor holiday is 1, otherwise is 0.
- weathersit :
- 1: Clear, Few clouds, Partly cloudy, Partly cloudy
- 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist
- 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds
- 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog
- temp : Normalized temperature in Celsius. The values are derived via (t-t_min)/(t_max-t_min), t_min=-8, t_max=+39 (only in hourly scale)
- atemp: Normalized feeling temperature in Celsius. The values are derived via (t-t_min)/(t_max-t_min), t_min=-16, t_max=+50 (only in hourly scale)
- hum: Normalized humidity. The values are divided to 100 (max)
- windspeed: Normalized wind speed. The values are divided to 67 (max)
- casual: count of casual users
- registered: count of registered users
- cnt: count of total rental bikes including both casual and registered
for further more information please go through the following link,
http://archive.ics.uci.edu/ml/datasets/Bike+Sharing+Dataset
"""
)
st.text("I have concatenated the two datasets 'hour.csv' & 'day.csv' files since they both have same columns and they are completeing each other.")
st.write("For more info about the datasets or the source code you can check them out from here: [BikeSharing](https://github.com/mariamhus/MidProjectEpsilon_BikeRenting)")


st.title('Bike Sharing EDA')
df = pd.read_csv('newrResultBikeSharing.csv')
st.dataframe(df.head())



st.header("Count of bikes during: ")
radio = st.radio("Select An Option",["year", "season"])
if radio == 'year':
    st.text("Count of bikes during years")
    fig=px.pie(data_frame=df,
      names=df.groupby('year').sum()['count'].index,
     values=df.groupby('year').sum()['count'].values,
      hole=0.3)
    st.plotly_chart(fig)
elif radio == 'season':
    st.text("Count of bikes during seasons")
    fig=px.pie(data_frame=df,
      names=df.groupby('season').sum()['count'].index,
     values=df.groupby('season').sum()['count'].values,
      hole=0.5)
    st.plotly_chart(fig)

st.title("Exploratory Data Analysis:")
st.title("1-Uni Varient:")
st.header('Q1.We want to check the distribution of the numerical data in the dataset.')

option2 = st.selectbox("Select an option for your histogram: ",["temp","atemp","humidity","windspeed"])
if option2 == 'temp':
    st.text("Histogram for temp")
    fig=px.histogram(df['temp'])
    st.markdown("- temp/count: bike rental was at its max value when the temp was equal to 0.3")
    st.plotly_chart(fig)
elif option2 == 'atemp':
    st.text("Histogram for atemp")
    fig=px.histogram(df['atemp'])
    st.markdown("- atemp/count: bike rental was at its max value when the atemp was equal to 0.6")
    st.plotly_chart(fig)
elif option2 == 'humidity':
    st.text("Histogram for humidity")
    fig=px.histogram(df['humidity'])
    st.markdown("- humidity/count: bike rental was at its max value when the humidity was equal to 0.9")
    st.plotly_chart(fig)
elif option2 == 'windspeed':
    st.text("Histogram for windspeed")
    fig=px.histogram(df['windspeed'])
    st.markdown("- windspeed/count: bike rental was at its max value when the windspeed was equal to 0.0")
    st.plotly_chart(fig)


st.header("corelation between each features")
fig2=plt.figure(figsize=(20,20))
sns.heatmap(df.corr('pearson'),vmin=-1,vmax=1,cmap='coolwarm',annot=True,square=True)
st.pyplot(fig2)

# st.header("boxplot between count & each categorical features")
# option3 = st.selectbox("Select an option to show a boxplot between count & each categorical features: ",["season","holiday","workingday","weather"])


fields =[f for f in df]
fields = fields[5:-3]
st.header("Scatter plot between count & each numeric features")
st.text(fields[5:9])
fig = plt.figure(figsize=(17,3))

for i,f in enumerate(fields[5:9]):
    ax=fig.add_subplot(1,4,i+1)
    ax.scatter(df[f],df['count'])
    ax.set_ylabel('count')
    ax.set_xlabel(f)
st.pyplot(fig)

st.title('Q2.Relation between categorical values and count, the most and the least values.')
option3 = st.selectbox("Select an option to show a boxplot between count & each categorical features: ",["season","month","hour","holiday","workingday","weather"])
if option3 == 'season':
    st.text("Boxplot between count of bikes & season")
    fig=plt.figure()
    sns.countplot(df['season'])
    st.markdown("- season 3 has most bike counts & season 4 has least counts")
    st.pyplot(fig)
elif option3 == 'month':
    st.text("Boxplot between count of bikes & month")
    fig=plt.figure()
    sns.countplot(df['month'])
    st.markdown("- months 5,7 has the most bike counts & month 2 has least counts")
    st.pyplot(fig)
elif option3 == 'hour':
    st.text("Boxplot between count of bikes & hour")
    fig=plt.figure()
    sns.countplot(df['hour'])
    st.markdown("- hour 14 hasmost bike counts & hour 4 has least counts")
    st.pyplot(fig)
elif option3 == 'holiday':
    st.text("Boxplot between count of bikes & holiday")
    fig=plt.figure()
    sns.countplot(df['holiday'])
    st.markdown("- when there is no holiday most bike counts & holidays has least counts")
    st.pyplot(fig)
elif option3 == 'workingday':
    st.text("Boxplot between count of bikes & workingday")
    fig=plt.figure()
    sns.countplot(df['workingday'])
    st.markdown("- when there is workingday most bike counts & no workingday has least counts")
    st.pyplot(fig)
elif option3 == 'weather':
    st.text("Boxplot between count of bikes & weather")
    fig=plt.figure()
    sns.countplot(df['weather'])
    st.markdown("- when there is weather 1 most bike counts & weather 4 has least counts")
    st.pyplot(fig)

st.header("Histogram of count")
st.text("from the graph it is shown that the count data is skewed at the left side. the density of values is more between 0 and 200.")
fig4 = plt.figure(figsize=(17,3))
sns.set_style('darkgrid')
sns.distplot(df['count'],bins=100,color='purple')
st.pyplot(fig4)

# st.title("Histogram of count after editing")
# fig5 = plt.figure(figsize=(17,3))
# sns.set_style('darkgrid')
# sns.distplot(df['count'],bins=100,color='purple')
# st.pyplot(fig5)

st.title('2.Bivariant:')
option = st.selectbox("Select an option: ",["Q3.What is the average count for each year?",
                                            "Q4.What is the average count for each month?",
                                            "Q5.What is the average count for each day?"])
if option == 'Q3.What is the average count for each year?':
    # st.header('Q3.What is the average count for each year?')
    st.header("Count of bikes during years")
    fig=px.bar(df,x='year' , y='count')
    st.plotly_chart(fig)
elif option == 'Q4.What is the average count for each month?':
    # st.header('Q4.What is the average count for each month?')
    st.header("Count of bikes during months")
    fig=px.bar(df,x='month' , y='count')
    st.plotly_chart(fig)
elif option == 'Q5.What is the average count for each day?':
    # st.header('Q5.What is the average count for each day?')
    st.header("Count of bikes during days")
    fig=px.bar(df,x='weekday' , y='count')
    st.plotly_chart(fig)
    

# fig08,(ax1,ax2)=plt.subplots(ncols=2,figsize=(20,6))
# sns.regplot(x=df['temp'],y=df['count'],ax=ax1)
# ax1.set(title='Relation between temp and users')
# sns.regplot(x=df['humidity'],y=df['count'],ax=ax2)
# ax2.set(title='Relation between humidity and users')
# st.plotly(fig08)
option8 = st.selectbox('Q5.How did Users get affected by: ',['humidity','tempreture'])
if option8 == 'tempreture':
    # st.header('Q5.How did the humidity and temp affect number of users?')
    st.text('1- Relation between temp and users:')
    fig08 = px.scatter(df, x='temp', y='count', trendline="ols")
    st.plotly_chart(fig08)
    st.text('We will notice that when tempreture increases, count of bikes shared increases.')
elif option8=='humidity':
    st.text('2- Relation between humidity and users:')
    fig09 = px.scatter(df, x='humidity', y='count', trendline="ols")
    st.plotly_chart(fig09)
    st.text('We will notice that when humidity increases, count of bikes shared decreases.')


# ////////////////////

st.title("3.Multivariant:")

st.header("Q6.What is the most count of bikes shared for each hour accourding to weekdays?")
fig05 , ax = plt.subplots(figsize=(20,10))
sns.pointplot(data=df,x='hour',y='count',hue='dayofweek')
ax.set(title='count of bikes was at its most at 17:00 during Sunday')
st.pyplot(fig05)
st.markdown('count of bikes was at its most at 17:00 during Sunday')


st.header('Q7.How many bikes shared during weekdays and weekends?')
fig6, ax = plt.subplots(figsize=(20,10))
sns.pointplot(data=df,x='hour',y='count',hue='weekday',ax=ax)
ax.set(title='Count of bikes during weekdays and weekends')
st.pyplot(fig6)

st.header('Q8.How many shared bikes during weekdays and weekends: Unregistered users?')
fig7, ax = plt.subplots(figsize=(20,10))
sns.pointplot(data=df,x='hour',y='casual',hue='weekday',ax=ax)
ax.set(title='Count of bikes during weekdays and weekends: unregistered users')
st.pyplot(fig7)

st.header('Q9.What is the Count of bikes during weekd/ays and weekends: Registered users?¶')
fig8, ax = plt.subplots(figsize=(20,10))
sns.pointplot(data=df,x='hour',y='registered',hue='weekday',ax=ax)
ax.set(title='Count of bikes during weekdays and weekends: registered users')
st.pyplot(fig8)

st.header('Q10.What is the Count of bikes during different weathers?')
fig9, ax = plt.subplots(figsize=(20,10))
sns.pointplot(data=df,x='hour',y='count',hue='weather',ax=ax)
ax.set(title='Count of bikes during weather')
st.pyplot(fig9)
st.text("=> so here we have 4 different typs of weather at 4:00 pm and 6:00 pm \n=> we have less numbers of users that are most likely in heavy rain weather \n-> green graph is most likely for cloudy or shower rain")

fig11, ax = plt.subplots(figsize=(20,10))
st.header('Q11.What is the Count of bikes during different seasons?')
sns.pointplot(data=df,x='hour',y='count',hue='season',ax=ax)
ax.set(title='Count of bikes during seasons')
st.pyplot(fig11)
st.text('we have here 4 numbers of seasons only one of them is lower at bike counts  \n "blue graph" => might be winter')

st.header('Q12.How many bikes shared during different months?')
hmada = df.groupby(['month','season'])['count'].count().reset_index()
fig12= px.bar(hmada,x='month',y='count', color='season')
st.plotly_chart(fig12)

st.header('Q13.How many bikes shared during the days?')
marioma = df.groupby(['weekday'])['count'].count().reset_index()
fig13 = px.bar(marioma,x='weekday',y='count')
st.plotly_chart(fig13)